# FINAL PROJECT, THESIS TITLE : ENCONDING TEXT WITH HYBRID SCHEME USING THE ENIGMA ALGORITHM AND THE ELGAMAL ALGORITHM
# program languange : python

from tkinter import *
from tkinter import ttk
root=Tk()
root.title("Kriptografi Enigma dan ElGamal")
root.geometry("200x200")

InitHRot=[['E','K','M','F','L','G','D','Q','V','Z','N','T','O','W','Y','H','X','U','S','P','A','I','B','R','C','J'],
          ['A','J','D','K','S','I','R','U','X','B','L','H','W','T','M','C','Q','G','Z','N','P','Y','F','V','O','E'],
          ['B','D','F','H','J','L','C','P','R','T','X','V','Z','N','Y','E','I','W','G','A','K','M','U','S','Q','O'],
          ['E','S','O','V','P','Z','J','A','Y','Q','U','I','R','H','X','L','N','F','T','G','K','D','C','M','W','B'],
          ['V','Z','B','R','G','I','T','Y','U','P','S','D','N','H','L','X','A','W','M','J','Q','O','F','E','C','K']]
InitZRot=[[4,10,12,5,11,6,3,16,21,25,13,19,14,22,24,7,23,20,18,15,0,8,1,17,2,9], 
          [0,9,3,10,18,8,17,20,23,1,11,7,22,19,12,2,16,6,25,13,15,24,5,21,14,4],
          [1,3,5,7,9,11,2,15,17,19,23,21,25,13,24,4,8,22,6,0,10,12,20,18,16,14],
          [4,18,14,21,15,25,9,0,24,16,20,8,17,7,23,11,13,5,19,6,10,3,2,12,22,1],
          [21,25,1,17,6,8,19,24,20,15,18,3,13,7,11,23,0,22,12,9,16,14,5,4,2,10]]
          
InitHRef = [['E','J','M','Z','A','L','Y','X','V','B','W','F','C','R','Q','U','O','N','T','S','P','I','K','H','G','D'],
            ['Y','R','U','H','Q','S','L','D','P','X','N','G','O','K','M','I','E','B','F','Z','C','W','V','J','A','T'],
            ['F','V','P','J','I','A','O','Y','E','D','R','Z','X','W','G','C','T','K','U','Q','S','B','N','M','H','L']]

InitZRef = [[4,9,12,25,0,11,24,23,21,1,22,5,2,17,16,20,14,13,19,18,15,8,10,7,6,3],
            [24,17,20,7,16,18,11,3,15,23,13,6,14,10,12,8,4,1,5,25,2,22,21,9,0,19],
            [5,21,15,9,8,0,14,24,4,3,17,25,23,22,6,2,19,10,20,16,18,1,13,12,7,11]]

#=================================================================================    
# W I N D O W    P E N G A T U R A N    R O T O R (ROTOR'S SETTING)

def Pengaturan_Rotor():
    global win_Peng_Rotor, listbox_Rotor, listbox_Rotor2, rotor_yang_dipilih
    global r, combo_ref, HRot, ZRot, HRef, ZRef
    win_Peng_Rotor = Toplevel(root)
    win_Peng_Rotor.title("Pengaturan Rotor")
    win_Peng_Rotor.geometry("300x300")
    
    HRot=[]
    ZRot=[]

    HRef=[]
    ZRef=[]
    
    #PILIH ROTOR    
    pilihan_rotor = ['Rotor 1','Rotor 2','Rotor 3','Rotor 4','Rotor 5']
    rotor_yang_dipilih = []
    r = []
    
    listbox_Rotor = Listbox(win_Peng_Rotor, height=5, width=10)
    listbox_Rotor.place(x=60,y=30)
    for a in pilihan_rotor:
        listbox_Rotor.insert(END, a)
    
    listbox_Rotor2 = Listbox(win_Peng_Rotor,height=5,width=10)
    listbox_Rotor2.place(x=175,y=30)    
        
    button_Peng_Rotor = Button(win_Peng_Rotor, text ='->', command=pilih_Rotor)
    button_Peng_Rotor.place(x=140,y=45)

    button_Peng_Rotor2 = Button(win_Peng_Rotor, text='<-', command=hapus_Rotor)
    button_Peng_Rotor2.place(x=140,y=75)

    #PILIH REFLEKTOR
    pilihan_ref = ['Reflektor A', 'Reflektor B', 'Reflektor C']
    combo_ref = ttk.Combobox(win_Peng_Rotor, values=pilihan_ref)
    combo_ref.place(x=60, y=150)    
    
    button_Peng_Rotor4 = Button(win_Peng_Rotor, text='OK', command=submit_rotor)
    button_Peng_Rotor4.place(x=210,y=148)
    
    win_Peng_Rotor.mainloop()
    
def pilih_Rotor():
    list_rotor = []
    p = listbox_Rotor.curselection()
    list_rotor.append(listbox_Rotor.get(p))
    rotor_yang_dipilih.append(listbox_Rotor.get(p))
    listbox_Rotor.delete(ANCHOR)
    
    for item in list_rotor:
        listbox_Rotor2.insert(END,item)   

def hapus_Rotor():
    list_rotor1 = []
    q = listbox_Rotor2.curselection()
    list_rotor1.append(listbox_Rotor2.get(q))
    listbox_Rotor2.delete(ANCHOR)

    for item in list_rotor1:
        listbox_Rotor.insert(END,item)       
        rotor_yang_dipilih.remove(item)

def submit_rotor():
    global r1, r2, r3
    for i in range (0,3):
        if rotor_yang_dipilih[i]== 'Rotor 1' :
            r.append(0)
        elif rotor_yang_dipilih[i]=='Rotor 2':
            r.append(1)
        elif rotor_yang_dipilih[i]=='Rotor 3' :
            r.append(2)
        elif rotor_yang_dipilih[i]=='Rotor 4' :
            r.append(3)
        else:
            r.append(4)
    r1 = r[0]
    r2 = r[1]
    r3 = r[2]   

#def submit_reflektor():
    global ref
    ref_yg_dipilih = combo_ref.get()
    if ref_yg_dipilih=='Reflektor A':
        ref=0
        update = ref_yg_dipilih + ' : EJMZALYXVBWFCRQUONTSPIKHGD'
    elif ref_yg_dipilih=='Reflektor B':
        ref=1
        update = ref_yg_dipilih + ' : YRUHQSLDPXNGOKMIEBFZCWVJAT'
    else:
        ref=2
        update = ref_yg_dipilih + ' : YRUHQSLDPXNGOKMIEBFZCWVJAT'
    label1 = Label(win_Peng_Rotor, text=update)
    label1.place(x=20,y=180)  

    global spinbox_r1, spinbox_r2, spinbox_r3
    label = Label(win_Enkripsi, text = 'R-'+str(r1+1),fg='black', bg='#ffcba7')
    label.place(x=460, y=50)    
    spinbox_r1 = Spinbox(win_Enkripsi, values=InitHRot[r1], width=5) 
    spinbox_r1.place(x=450, y=80)
    
    label = Label(win_Enkripsi, text = 'R-'+str(r2+1),fg='black', bg='#ffcba7')
    label.place(x=530, y=50)    
    spinbox_r2 = Spinbox(win_Enkripsi, values=InitHRot[r2], width=5) 
    spinbox_r2.place(x=520, y=80)
    
    label = Label(win_Enkripsi, text = 'R-'+str(r3+1),fg='black', bg='#ffcba7')
    label.place(x=600, y=50)    
    spinbox_r3 = Spinbox(win_Enkripsi,values=InitHRot[r3], width=5) 
    spinbox_r3.place(x=590, y=80)    
    
    win_Peng_Rotor.destroy()
    
#=========================================================================================================    
    
# W I N D O W     E N K R I P S I (ENCRYPTION WINDOW)
def Enkripsi():
    global win_Enkripsi
    win_Enkripsi = Toplevel(root)
    win_Enkripsi.title("Enkripsi")
    win_Enkripsi.geometry("700x500")
    
    global y, g, p, k, PlainKey, text_PlainText
    y = StringVar()
    g = StringVar()
    p = StringVar()
    k = StringVar()
    PlainKey = StringVar()
    
    # GUI CODING FOR ENCRYPTION WINDOW (DELETED)
    
# FUNCTIONS USED FOR THE ENIGMA ALGORITHM
# 1. ROTORS AND REFLECTOR INITIALIZATION
def inisialisasi(r1,r2,r3,ref):
    HRot.append(InitHRot[r1])
    HRot.append(InitHRot[r2])
    HRot.append(InitHRot[r3])
    
    ZRot.append(InitZRot[r1])
    ZRot.append(InitZRot[r2])
    ZRot.append(InitZRot[r3])
    
    HRef.append(InitHRef[ref])
    ZRef.append(InitZRef[ref])

# 2. "TURNING" ROTORS
def geser(r): 
    TempH = HRot[r][0]
    TempZ = ZRot[r][0]
    
    for j in range (0,25):
        HRot[r][j] = HRot[r][j+1]
        ZRot[r][j] = ZRot[r][j+1]
    
    HRot[r][25] = TempH
    ZRot[r][25] = TempZ   
    
# TEXT ENCRYPTION USING THE ENIGMA ALGORITHM (MAIN CODING)   
def Enkripsi_Enigma():
    inisialisasi(r1,r2,r3,ref)
    k1 = spinbox_r1.get()
    k2 = spinbox_r2.get()
    k3 = spinbox_r3.get()
    
    n=26
    k=0
    while (k<n and HRot[0][k]!=k1):
        k = k+1
    
    if (HRot[0][k] == k1):
        indeks = k

        for m in range (0,indeks):
            tempH=HRot[0][0]
            tempZ=ZRot[0][0]
            
            for j in range (0,25):
                HRot[0][j] = HRot[0][j+1]
                ZRot[0][j] = ZRot[0][j+1]
                
            HRot[0][25]=tempH
            ZRot[0][25]=tempZ

#==================================
    k = 0
    while (k<n and HRot[1][k]!=k2):
        k = k+1
    
    if (HRot[1][k] == k2):
        indeks = k

        for m in range (0,indeks):
            tempH=HRot[1][0]
            tempZ=ZRot[1][0]
            
            for j in range (0,25):
                HRot[1][j] = HRot[1][j+1]
                ZRot[1][j] = ZRot[1][j+1]
                
            HRot[1][25]=tempH
            ZRot[1][25]=tempZ

#==================================
    k = 0
    while (k<n and HRot[2][k]!=k3):
        k = k+1
    
    if (HRot[2][k] == k3):
        indeks = k

        for m in range (0,indeks):
            tempH=HRot[2][0]
            tempZ=ZRot[2][0]
            
            for j in range (0,25):
                HRot[2][j] = HRot[2][j+1]
                ZRot[2][j] = ZRot[2][j+1]
                
            HRot[2][25]=tempH
            ZRot[2][25]=tempZ

    plain = text_PlainText.get("1.0",END)    
    m = len(plain)
    cipher=''
    for p in range (0,m-1):
        if ((p+1)%26==0) and ((p+1)%(26*26)!=0):
            geser(1)
        elif (p+1)%(26*26)==0:
            geser(0)
            geser(1)
        geser(2)    
    
        l=len(plain[p])

        temp = ord(plain[p])-65
        for i in range (2,-1,-1):
            temp = (temp + ZRot[i][0]) % 26
            temp = (ZRot[i][temp] - ZRot[i][0]) % 26
 
        temp = ZRef[0][temp]
        
        for i in range (0,3):
            temp = (temp + ZRot[i][0]) % 26
  
            k = 0
            while ((k<26) and (ZRot[i][k] != temp)):
                k = k+1
            indeks = k    
            temp = (k-ZRot[i][0]) % 26
                     
        cipher=cipher+chr(temp+65)
        
    text_CipherText = Text(win_Enkripsi, width=50, height=5)
    text_CipherText.place(x=15,y=190)
    text_CipherText.insert(END, cipher)

# KEY (THE ROTOR SETTINGS) ENCRYPTION USING THE ELGAMAL ALGORITHM
def Enkripsi_Elgamal():
    y_int=int(y.get())
    p_int=int(p.get())
    g_int=int(g.get())
    k_int=int(k.get())
    plainKey = PlainKey.get()
    plainKey_Ascii = []
    for x in plainKey:
        plainKey_Ascii.append(ord(x))

    a_int = (g_int**k_int)%p_int
    text_cipherkey_a = Text(win_Enkripsi,width=50, height=1)
    text_cipherkey_a.place(x=55, y=435)
    text_cipherkey_a.insert(END,a_int)
    
    b = []
    for num in plainKey_Ascii:
        bb = ((y_int**k_int)*num)%p_int
        b.append(bb)
    text_cipherkey_a = Text(win_Enkripsi,width=50, height=1)
    text_cipherkey_a.place(x=55, y=460)
    text_cipherkey_a.insert(END,b)          
    
#==============================================================================================    
# PENGATURAN ROTOR UNTUK DEKRIPSI (ROTOR SETTINGS FOR DECRYPTION)
def Pengaturan_Rotor_Dek():
    global win_Peng_Rotor_dek, listbox_Rotor, listbox_Rotor2, rotor_yang_dipilih
    global r, combo_ref, HRot, ZRot, HRef, ZRef
    win_Peng_Rotor_dek = Toplevel(root)
    win_Peng_Rotor_dek.title("Pengaturan Rotor")
    win_Peng_Rotor_dek.geometry("300x300")
    
    HRot=[]
    ZRot=[]

    HRef=[]
    ZRef=[]
       
    pilihan_rotor = ['Rotor 1','Rotor 2','Rotor 3','Rotor 4','Rotor 5']
    rotor_yang_dipilih = []
    r = []
    
    listbox_Rotor = Listbox(win_Peng_Rotor_dek, height=5, width=10)
    listbox_Rotor.place(x=60,y=30)
    for a in pilihan_rotor:
        listbox_Rotor.insert(END, a)
    
    listbox_Rotor2 = Listbox(win_Peng_Rotor_dek,height=5,width=10)
    listbox_Rotor2.place(x=175,y=30)    
        
    button_Peng_Rotor = Button(win_Peng_Rotor_dek, text ='->', command=pilih_Rotor)
    button_Peng_Rotor.place(x=140,y=45)
   
    button_Peng_Rotor2 = Button(win_Peng_Rotor_dek, text='<-', command=hapus_Rotor)
    button_Peng_Rotor2.place(x=140,y=75)
   
    #PILIH REFLEKTOR (SELECT REFLECTORS)
    pilihan_ref = ['Reflektor A', 'Reflektor B', 'Reflektor C']
    combo_ref = ttk.Combobox(win_Peng_Rotor_dek, values=pilihan_ref)
    combo_ref.place(x=60, y=150)    
    
    button_Peng_Rotor4 = Button(win_Peng_Rotor_dek, text='OK', command=submit_rotor_dek)
    button_Peng_Rotor4.place(x=210,y=148)
    
    win_Peng_Rotor_dek.mainloop()
    
def submit_rotor_dek():
    global r1, r2, r3
    for i in range (0,3):
        if rotor_yang_dipilih[i]== 'Rotor 1' :
            r.append(0)
        elif rotor_yang_dipilih[i]=='Rotor 2':
            r.append(1)
        elif rotor_yang_dipilih[i]=='Rotor 3' :
            r.append(2)
        elif rotor_yang_dipilih[i]=='Rotor 4' :
            r.append(3)
        else:
            r.append(4)
    r1 = r[0]
    r2 = r[1]
    r3 = r[2]

    global ref
    ref_yg_dipilih = combo_ref.get()
    if ref_yg_dipilih=='Reflektor A':
        ref=0
        update = ref_yg_dipilih + ' : EJMZALYXVBWFCRQUONTSPIKHGD'
    elif ref_yg_dipilih=='Reflektor B':
        ref=1
        update = ref_yg_dipilih + ' : YRUHQSLDPXNGOKMIEBFZCWVJAT'
    else:
        ref=2
        update = ref_yg_dipilih + ' : YRUHQSLDPXNGOKMIEBFZCWVJAT'
    print(InitHRef[ref]) 
    print(r1,   r2,   r3)

    global spinbox_r1, spinbox_r2, spinbox_r3
    label = Label(win_Dekripsi, text = 'R-'+str(r1+1),fg='black', bg='#ffcba7')
    label.place(x=460, y=50)    
    spinbox_r1 = Spinbox(win_Dekripsi, values=InitHRot[r1], width=5)
    spinbox_r1.place(x=450, y=80)
    
    label = Label(win_Dekripsi, text = 'R-'+str(r2+1),fg='black', bg='#ffcba7')
    label.place(x=530, y=50)    
    spinbox_r2 = Spinbox(win_Dekripsi, values=InitHRot[r2], width=5) 
    spinbox_r2.place(x=520, y=80)
    
    label = Label(win_Dekripsi, text = 'R-'+str(r3+1),fg='black', bg='#ffcba7')
    label.place(x=600, y=50)    
    spinbox_r3 = Spinbox(win_Dekripsi,values=InitHRot[r3], width=5) 
    spinbox_r3.place(x=590, y=80)    
    
    win_Peng_Rotor_dek.destroy()
    
#   W I N D O W   D E K R I P S I (DECRYPTION WINDOW)
def Dekripsi():
    global win_Dekripsi, text_PlainText
    win_Dekripsi = Toplevel(root)
    win_Dekripsi.title("Dekripsi")
    win_Dekripsi.geometry("700x500")
    
    global a, b, X, p
    a = StringVar()
    b = StringVar()
    X = StringVar()
    p = StringVar()
    
    # GUI CODING FOR DECRYPTION WINDOW
    (deleted)
    
# TEXT DECRYPTION USING THE ENIGMA ALGORITHM    
def Dekripsi_Enigma():
    inisialisasi(r1,r2,r3,ref)
    k1 = spinbox_r1.get()
    k2 = spinbox_r2.get()
    k3 = spinbox_r3.get()
    
    n=26
    k=0
    while (k<n and HRot[0][k]!=k1):
        k = k+1
    
    if (HRot[0][k] == k1):
        indeks = k

        for m in range (0,indeks):
            tempH=HRot[0][0]
            tempZ=ZRot[0][0]
            
            for j in range (0,25):
                HRot[0][j] = HRot[0][j+1]
                ZRot[0][j] = ZRot[0][j+1]
                
            HRot[0][25]=tempH
            ZRot[0][25]=tempZ

#==================================
    k = 0
    while (k<n and HRot[1][k]!=k2):
        k = k+1
    
    if (HRot[1][k] == k2):
        indeks = k

        for m in range (0,indeks):
            tempH=HRot[1][0]
            tempZ=ZRot[1][0]
            
            for j in range (0,25):
                HRot[1][j] = HRot[1][j+1]
                ZRot[1][j] = ZRot[1][j+1]
                
            HRot[1][25]=tempH
            ZRot[1][25]=tempZ

#==================================
    k = 0
    while (k<n and HRot[2][k]!=k3):
        k = k+1
    
    if (HRot[2][k] == k3):
        indeks = k

        for m in range (0,indeks):
            tempH=HRot[2][0]
            tempZ=ZRot[2][0]
            
            for j in range (0,25):
                HRot[2][j] = HRot[2][j+1]
                ZRot[2][j] = ZRot[2][j+1]
                
            HRot[2][25]=tempH
            ZRot[2][25]=tempZ

    plain = text_PlainText.get("1.0",END)    
    m = len(plain)
    cipher=''
    for p in range (0,m-1):
        if ((p+1)%26==0) and ((p+1)%(26*26)!=0):
            geser(1)
        elif (p+1)%(26*26)==0:
            geser(0)
            geser(1)
        geser(2)      
        l=len(plain[p])        
        
        temp = ord(plain[p])-65
        
        for i in range (2,-1,-1):
            temp = (temp + ZRot[i][0]) % 26
            temp = (ZRot[i][temp] - ZRot[i][0]) % 26
            
        temp = ZRef[0][temp]
        
        #balikan reflektor
        for i in range (0,3):
            temp = (temp + ZRot[i][0]) % 26
            k = 0
            while ((k<26) and (ZRot[i][k] != temp)):
                k = k+1
            indeks = k    
            temp = (k-ZRot[i][0]) % 26
                  
        cipher=cipher+chr(temp+65)
        
    text_CipherText = Text(win_Dekripsi, width=50, height=5)
    text_CipherText.place(x=15,y=190)
    text_CipherText.insert(END, cipher)
    
# KEY (ROTORS SETTING) DECRYPTION USING THE ELGAMAL ALGORITHM
def Dekripsi_Elgamal():
    a_int = int(a.get())
    b_str = b.get()
    x_int = int(X.get())
    p_int = int(p.get())
    
    l = list(map(int, b_str.split(' ')))
    b_arr = [int(x) for x in l]
    print(b_arr)
    
    a_x_inv = (a_int**(p_int-1-x_int))%p_int
    print(a_x_inv)
    
    hasil=''
    for num in b_arr:
        hasil = hasil + chr((num*a_x_inv)%p_int)
    print(hasil)

    text_plainkey = Text(win_Dekripsi,width=20, height=1)
    text_plainkey.place(x=340, y=410)
    text_plainkey.insert(END,hasil)    
    
#====================================================================================

# W I N D O W    P E M B A N G K I T A N   K U N C I (GENERATING PUBLIC AND PRIVATE KEY FOR ELGAMAL ALGORITHM WINDOW)
def Key():
    global win_Key
    win_Key = Toplevel(root)
    win_Key.title("Pembangkitan Kunci")
    win_Key.geometry("300x300")
    
    global p, g, x, y, entry_p, entry_g, entry_x, label_Update
    p = StringVar()
    g = StringVar()
    x = StringVar()
   
   # GUI CODING FOR GENERATING ELGAMAL KEY WINDOW
   (deleted)
   
    win_Key.mainloop()

# GENERATING PUBLIC AND PRIVATE ELGAMAL'S KEY
def bangkit_kunci():
    p_int=int(p.get())
    g_int=int(g.get())
    x_int=int(x.get())
    if p_int>1 :
        for i in range (2, p_int):
            if (p_int%i)==0:
                update = p.get() + " bukan bilangan prima."
                label_Update = Label(win_Key, text = update)
                label_Update.place(x=10, y=190)
                
                update = "Tidak bisa diproses."
                label_Update = Label(win_Key, text = update)
                label_Update.place(x=40, y=170)
                return False
                break
        else:
            if (g_int<p_int and x_int<p_int-2):
                y_int = (g_int**x_int)%p_int
                text_y = Text(win_Key, width=15, height=1)
                text_y.place(x=40,y=90)
                text_y.insert(END, y_int)
                
                #update = y_int
                #label_Update = Label(win_Key, text = update)
                #label_Update.place(x=40, y=90)
                
                text_pubkey = Text (win_Key, width=17, height=1)
                text_pubkey.place(x=120,y=125)
                text_pubkey.insert(END, "("+ str(y_int) + ", " + g.get() + ", " + p.get() + ")")
                   
                #update = "Public key (y, g, p) = (" + str(y_int) + ", " + g.get() + ", " + p.get() + ")"
                #label_Update = Label(win_Key, text = update, fg='black', bg='#ffa161')
                #label_Update.place(x=10, y=125)
                
                text_privkey = Text(win_Key, width=17, height=1)
                text_privkey.place(x=120,y=145)
                text_privkey.insert(END, "(" + x.get() + ", " + p.get() + ")")
                    
                #update = "Private key (x, p) = (" + x.get() + ", " + p.get() + ")"
                #label_Update = Label (win_Key, text = update, fg='black', bg='#ffa161')
                #label_Update.place(x=10, y=145)
            else:
                update = "Nilai yang diinput harus memenuhi g<p dan x<p-2."
                label_Update = Label(win_Key, text = update)
                label_Update.place(x=10, y=190)

                update = "Tidak bisa diproses."
                label_Update = Label(win_Key, text = update)
                label_Update.place(x=10, y=170)                    
            return True
    else:
        update = p.get() + " bukan bilangan prima."
        label_Update = Label(win_Key, text = update)
        label_Update.place(x=10, y=190)
        
        update = "Tidak bisa diproses."
        label_Update = Label(win_Key, text = update)
        label_Update.place(x=40, y=170)
        return False
 
# DELETE BUTTON
def key_Hapus():
    entry_p.delete(0, END)
    entry_g.delete(0, END)
    entry_x.delete(0, END)
    label_Update.delete(0, END)    


#  GUI CODES FOR THE MAIN WINDOW
button_Panduan = Button(root, text="Panduan", command=Panduan)
button_Panduan.place(x=5,y=5)

#button Tentang
button_Tentang = Button(root, text='Tentang', command=Tentang)
button_Tentang.place(x=60, y=5)

#button_Enkripsi
button_Enkripsi=Button(root, text='Enkripsi', command = Enkripsi)
button_Enkripsi.pack(pady=70)

#button_Dekripsi
button_Dekripsi=Button(root, text='Dekripsi', command = Dekripsi)
button_Dekripsi.place(x=73, y=100)

#button pembangkitan kunci
button_Key=Button(root, text='Pembangkitan Kunci', command = Key)
button_Key.place(x=75, y=170)

root.mainloop()
